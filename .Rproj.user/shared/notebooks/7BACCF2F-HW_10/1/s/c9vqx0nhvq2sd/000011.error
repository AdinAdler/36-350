{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"test_that(desc = \"Test for first and second string empty \", expect_silent(word.similarity(\"\", \n    \"\")))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"test_code(desc, code, env = parent.frame())","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"get_reporter()$end_test(context = get_reporter()$.context, test = test)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stop(\"Test failed: '\", test, \"'\\n\", messages, call. = FALSE)","line_number":0}],"message":"Error: Test failed: 'Test for first and second string empty '\n* 'x' must be numeric\n1: expect_silent(word.similarity(\"\", \"\"))\n2: evaluate_promise(object)\n3: with_sink(temp, withCallingHandlers(withVisible(code), warning = handle_warning, \n       message = handle_message))\n4: withCallingHandlers(withVisible(code), warning = handle_warning, message = handle_message)\n5: withVisible(code)\n6: word.similarity(\"\", \"\")\n7: suppressWarnings(wilcox.test(x = word.1.integers, y = word.2.integers)$statistic[[1]]) at :5\n8: withCallingHandlers(expr, warning = function(w) invokeRestart(\"muffleWarning\"))\n9: wilcox.test(x = word.1.integers, y = word.2.integers)\n10: wilcox.test.default(x = word.1.integers, y = word.2.integers)\n11: stop(\"'x' must be numeric\")\n"}